// Generated by CoffeeScript 1.6.3
(function() {
  window.Pager = function(dom, c, a, params, pager, ajax) {
    var a2, b2, className, has_ellipsis, i, last, link, next, p, _i, _ref;
    if (pager.page_count === 1) {
      return '';
    }
    ajax || (ajax = false);
    className = ajax ? 'pager_' + ajax.className : false;
    last = false;
    if (pager.page > 1) {
      params.p = pager.page - 1;
      last = {
        id: ajax ? className + params.p : false,
        href: getUrl(c, a, params)
      };
    }
    next = false;
    if (pager.page < pager.page_count) {
      params.p = pager.page + 1;
      next = {
        id: ajax ? className + params.p : false,
        href: getUrl(c, a, params)
      };
    }
    p = {
      className: className,
      last: last,
      next: next,
      list: []
    };
    b2 = pager.page - 2;
    a2 = pager.page + 2;
    has_ellipsis = false;
    for (i = _i = 1, _ref = pager.page_count; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
      if ((i >= b2 && i <= a2) || i === 1 || i === pager.page_count) {
        params.p = i;
        link = {
          ellipsis: false,
          id: ajax ? className + i : false,
          href: getUrl(c, a, params),
          name: i,
          select: i === pager.page
        };
      } else {
        link = has_ellipsis ? false : {
          ellipsis: true
        };
        has_ellipsis = true;
      }
      link && p.list.push(link);
    }
    dom.html(pagerTemplate.render(p));
    if (ajax) {
      return dom.find('[id^=' + className + ']').click(function() {
        p = this.id.replace(className, '');
        ajax.params.p = p;
        oneAjax(ajax.c, ajax.a, ajax.params, ajax.callback, this);
        return false;
      });
    }
  };

  window.YCache = function(uniqueN) {
    var delCookie, encode, getCookie, setCookie, unencode;
    uniqueN = typeof uniqueN !== "string" ? "" : 'uniqueN_' + uniqueN + '_';
    setCookie = function(name, value) {
      var Days, exp;
      Days = 1;
      exp = new Date();
      exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);
      return document.cookie = "" + name + " = " + (escape(this.encode(value))) + " ;expires= " + (exp.toGMTString()) + " ";
    };
    getCookie = function(name) {
      var arr;
      arr = document.cookie.match(new RegExp("(^| ) " + name + " =([^;]*)(;|$)"));
      if (arr != null) {
        this.unencode(unescape(arr[2]));
      }
      return null;
    };
    delCookie = function(name) {
      var exp, tem;
      exp = new Date();
      exp.setTime(exp.getTime() - 1);
      tem = this.getCookie(name);
      if (tem != null) {
        return document.cookie = 'name=' + tem + ';expires=' + exp.toGMTString();
      }
    };
    encode = function(str) {
      var i, temstr, _i, _ref;
      temstr = "";
      for (i = _i = _ref = str.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        temstr = temstr + str.charCodeAt(i);
        if (i) {
          temstr = temstr + 'a';
        }
      }
      return temstr;
    };
    unencode = function(str) {
      var i, strarr, temstr, _i, _ref;
      strarr = "";
      temstr = "";
      strarr = str.split("a");
      for (i = _i = _ref = str.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        temstr = temstr + String.fromCharCode(eval(strarr[i]));
      }
      return temstr;
    };
    return {
      set: function(text) {
        return setCookie(uniqueN, text);
      },
      clear: function() {
        return delCookie(uniqueN);
      },
      get: function() {
        return getCookie(uniqueN);
      }
    };
  };

  window.State = (function() {
    var Cache, Dic, history, loadFromCookie, saveToCookie;

    function State() {}

    history = [];

    Dic = {};

    Cache = YCache('siteHistory');

    State.prototype.setDic = function(p) {
      var k, _i, _len;
      if (typeof p !== 'object') {
        false;
      }
      for (_i = 0, _len = p.length; _i < _len; _i++) {
        k = p[_i];
        Dic[k] = p[k];
      }
      return true;
    };

    State.prototype.setDefaultPosition = function(url, params) {
      loadFromCookie();
      if (history.length === 0) {
        history.push({
          url: url,
          params: params
        });
        saveToCookie();
      }
      return true;
    };

    State.prototype.forward = function(url, params) {
      history.push({
        url: url,
        params: params
      });
      saveToCookie();
      window.State.gotoUrl(url, params);
      return true;
    };

    State.prototype.forwardNoback = function(url, params) {
      window.State.gotoUrl(url, params);
      return true;
    };

    State.prototype.back = function(n) {
      var h, i, _i, _ref;
      n || (n = 0);
      if (!n) {
        h = history[history.length - 1];
      } else if (n < 0) {
        n = (-n > history.length ? history.length : -n) - 1;
      } else {
        n = n > history.length ? 0 : history.length - n;
      }
      for (i = _i = _ref = history.length - 1; _ref <= 1 ? _i <= 1 : _i >= 1; i = _ref <= 1 ? ++_i : --_i) {
        h = history.pop();
        if (i === n) {
          break;
        }
      }
      saveToCookie();
      window.State.gotoUrl(h.url, h.params);
      return true;
    };

    State.prototype.gotoUrl = function(url, params) {
      location.href = getUrl(url, params);
      return true;
    };

    State.prototype.getPositionHtml = function() {
      var i, p, _i, _ref;
      p = {
        "default": {},
        list: []
      };
      for (i = _i = 0, _ref = history.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (i === 0) {
          p["default"] = {
            url: getUrl(history[i].url, history[i].params),
            name: Dic[history[i].url]
          };
        } else {
          p.list.push({
            url: getUrl(history[i].url, history[i].params),
            name: Dic[history[i].url]
          });
        }
      }
      sitePositionTemplate.render(p);
      return true;
    };

    saveToCookie = function() {
      var i, j, l, pl, v, _i, _j, _len, _ref, _ref1;
      l = [];
      for (i = _i = 0, _ref = history.lenght; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        pl = [];
        _ref1 = history[i].params;
        for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
          j = _ref1[_j];
          pl.push(j + '**' + history[i].params[j]);
        }
        l.push(history[i].url + '^^' + pl.join('&&'));
      }
      v = l.join('%%');
      Cache.set(v);
      return true;
    };

    loadFromCookie = function() {
      var c, h, hl, i, l, p, pl, pp, _i, _j, _ref, _ref1;
      c = Cache.get();
      if (!c || c.indexOf('/') === -1) {
        return false;
      }
      hl = c.split('%%');
      h = [];
      for (i = _i = 0, _ref = hl.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        l = hl[i].split('^^');
        p = {};
        if (l[1]) {
          pl = l[1].split('&&');
          for (i = _j = 0, _ref1 = pl.length; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
            pp = pl[ii].split('**');
            p[pp[0]] = pp[1];
          }
        }
        h.push({
          url: l[0],
          params: p
        });
      }
      history = h;
      return true;
    };

    return State;

  })();

  window.time = function() {
    return Math.floor(STIME + (new Date().getTime() - CTIME) / 1000);
  };

  window.getUrl = function(c, a, p) {
    var arr, i, k, l, param, pieces, url, _i, _j, _len, _ref, _ref1;
    if (a === void 0) {
      pieces = c.split("/");
      arr = URLCACHE;
      for (i = _i = 0, _ref = pieces.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (arr[pieces[i]]) {
          arr = arr[pieces[i]];
        }
      }
      return "" + BASEURL + "/" + c + "?v=" + arr;
    } else {
      if (typeof a === "string") {
        url = "" + BASEURI + "/" + c + "/" + a;
        param = p;
      } else {
        url = "" + BASEURI + "/" + c;
        param = a;
      }
      if (param) {
        l = [];
        for (_j = 0, _len = param.length; _j < _len; _j++) {
          k = param[_j];
          l.push("" + (encodeURIComponent(k)) + "=" + (encodeURIComponent(param[k])));
        }
                if ((_ref1 = l.length > 0) != null) {
          _ref1;
        } else {
          url = "" + url + "?" + (l.join('&'));
        };
      }
      return url;
    }
  };

  window.dateFormat = function(time, flag) {
    var date, ret;
    date = new Date(time * 1000);
    ret = '';
    if (!flag || flag === 1) {
      ret = "" + (date.getFullYear()) + "-" + (date.getMonth() + 1) + "-" + (date.getDate());
    } else if (flag === 2) {
      ret = "" + (date.getFullYear()) + "-" + (date.getMonth() + 1) + "-" + (date.getDate()) + " " + (date.getHours()) + ":" + (date.getMinutes()) + ":" + (date.getSeconds());
    }
    return ret;
  };

  window.oneAjax = function(c, a, data, succ_callback, dom) {
    var fail, k_disable, succ;
    if (dom) {
      k_disable = 0;
      $(dom).each(function() {
        if ($(this).data("k_disable")) {
          k_disable = 1;
        }
        return true;
      });
      if (k_disable) {
        return false;
      } else {
        $(dom).data("k_disable", 1);
      }
    }
    succ = function(obj) {
      dom && $(dom).data("k_disable", 0);
      if (obj === null || typeof obj !== "object" || !obj.code) {
        fail("", "parsererror", "");
      } else if (obj.code === "-1") {
        fail("", "servererror", obj.msg);
      } else {
        succ_callback(obj);
      }
      return true;
    };
    fail = function(jqXHR, textStatus, errorThrown) {
      dom && $(dom).data("k_disable", 0);
      if (jqXHR.status === 0 && textStatus === "error") {
        alert("ajax error: " + errorThrown);
      } else if (textStatus === "parsererror") {
        alert('ajax parsererror');
      } else if (textStatus === "servererror") {
        alert("ajax servererror: " + errorThrown);
      } else {
        alert('ajax error: other');
      }
      return true;
    };
    return $.ajax({
      url: getUrl(c, a),
      data: data,
      dataType: "json",
      type: "POST",
      success: succ,
      error: fail
    });
  };

}).call(this);
